using DinkToPdf;
using DinkToPdf.Contracts;
using System;
using System.Collections.Generic;
using System.Text;
using CikguHub.Data;
using System.IO.Packaging;
using DocumentFormat.OpenXml.Packaging;
using System.Text.RegularExpressions;
using OpenXmlPowerTools;
using System.Xml.Linq;
using System.IO;
using System.Linq;

namespace CikguHub.Document
{
    public interface IDocumentService
    {
        byte[] GeneratePdfFromModel(Enrolment model, Stream templateFile, string watermarkUrl = null);
    }

    public class DocumentService : IDocumentService
    {
        private readonly IConverter _converter;


        public DocumentService(
            IConverter converter)
        {
            _converter = converter;
        }

        public byte[] GeneratePdfFromModel(Enrolment model, Stream templateFile, string watermarkUrl = null)
        {
            XElement html = ToHtml(model, templateFile);

            html.Elements().Last().SetAttributeValue("style", "background-image: url(" + watermarkUrl + "); background-repeat: no-repeat; background-position: center;");

            var pdf = GeneratePdf(html.ToString());

            return pdf;
        }

        private XElement ToHtml(Enrolment model, Stream templateFile)
        {
            var document = WordprocessingDocument.Open(templateFile, true);
            var content = document.MainDocumentPart.GetXDocument().Descendants(W.p);

            OpenXmlRegex.Replace(content, new Regex(@"\[FullName\]", RegexOptions.IgnoreCase), model.User.Name, null);

            OpenXmlRegex.Replace(content, new Regex(@"\[TodayDate\]", RegexOptions.IgnoreCase), DateTime.Now.ToString("dd MMMM yyyy"), null);

            document.MainDocumentPart.PutXDocument();

            HtmlConverterSettings settings = new HtmlConverterSettings();
            return HtmlConverter.ConvertToHtml(document, settings);
        }

        private byte[] GeneratePdf(string htmlContent)
        {
            var globalSettings = new GlobalSettings
            {
                ColorMode = ColorMode.Color,
                Orientation = Orientation.Landscape,
                PaperSize = PaperKind.A4,
                Margins = new MarginSettings { Top = 1, Bottom = 1, Left = 1, Right = 1, Unit = Unit.Centimeters },
            };

            var objectSettings = new ObjectSettings
            {
                //PagesCount = true,
                HtmlContent = htmlContent,
                WebSettings = { DefaultEncoding = "utf-8" },
                //HeaderSettings = { FontSize = 10, Right = "Page [page] of [toPage]", Line = true },
                FooterSettings = { FontName = "Garamond", FontSize = 8, Center = "Certificate generated by CikguHub", Line = false },
            };

            var htmlToPdfDocument = new HtmlToPdfDocument()
            {
                GlobalSettings = globalSettings,
                Objects = { objectSettings },
            };

            return _converter.Convert(htmlToPdfDocument);
        }
    }
}

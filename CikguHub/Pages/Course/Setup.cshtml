@page "/Course/{id:int}/Setup"
@model CikguHub.Pages.Course.SetupModel

@{
    ViewData["Title"] = "Theme #" + Model.Course.CourseId.ToString("D3") + " - Setup";
    ViewData["Subtitle"] = Model.Course.Name;
    ViewData["ActiveCase"] = Model.Course.CourseId;
}

@section Styles
{
    <link href="~/assets/css/pages/wizard/wizard-3.css" rel="stylesheet" type="text/css" asp-append-version="true" />
    <link href="~/assets/plugins/custom/uppy/uppy.bundle.css" rel="stylesheet" type="text/css" />
    <style>
        .tagify.form-control {
            padding: 0;
        }
    </style>
    <style>
        label.error {
            color: #f64e60;
            font-size: .9rem;
            font-weight: 400;
        }

        input.error {
            border-color: #f64e60;
            padding-right: calc(1.5em + 1.3rem);
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23F64E60' viewBox='0 0 12 12'%3E%3Ccircle cx='6' cy='6' r='4.5'/%3E%3Cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3E%3Ccircle cx='6' cy='8.2' r='.6' fill='%23F64E60' stroke='none'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right calc(.375em + .325rem) center;
            background-size: calc(.75em + .65rem) calc(.75em + .65rem);
        }
    </style>
}

@section Scripts
{
    <script src="~/assets/plugins/custom/uppy/uppy.bundle.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.19.1/jquery.validate.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.19.1/additional-methods.min.js"></script>

    <script src="~/assets/plugins/custom/tinymce/tinymce.bundle.js?v=7.2.9"></script>
    <script>

    var FLUppy = function () {
        const ProgressBar = Uppy.ProgressBar;
        const StatusBar = Uppy.StatusBar;
        const FileInput = Uppy.FileInput;
        const Informer = Uppy.Informer;
        const Dashboard = Uppy.Dashboard;
        const Webcam = Uppy.Webcam;
        const XHRUpload = Uppy.XHRUpload

        var initUppy1 = function () {
            var id = '#kt_uppy_1';
            var options = {
                proudlyDisplayPoweredByUppy: false,
                target: id,
                inline: true,
                replaceTargetContent: true,
                showProgressDetails: true,
                note: 'No filetype restrictions.',
                height: 360,
                width: '100%',
                metaFields: [
                    { id: 'name', name: 'Name', placeholder: 'file name' },
                    { id: 'caption', name: 'Caption', placeholder: 'describe what the image is about' }
                ],
                browserBackButtonClose: true,
                showLinkToFileUploadResult: true,
                showSelectedFiles: true,
                hideProgressAfterFinish: false,
                showRemoveButtonAfterComplete: true,
                doneButtonHandler: () => {
                    $('[data-wizard-type="action-next"]').prop("disabled", false);
                }
            }
            var uppyDashboard = Uppy.Core({
                autoProceed: true,
                restrictions: {
                    maxFileSize: 10000000, // 10mb
                    maxNumberOfFiles: 1,
                    minNumberOfFiles: 1
                },
                meta: {
                    courseId: '@Model.Course.CourseId'
                }
            });
            uppyDashboard.use(Dashboard, options);
            uppyDashboard.use(XHRUpload, {
                endpoint: '/api/courses/step1',
                method: 'post',
                getResponseData() {
                    return {} // just empty. TODO: populate next wizard suggested fields with response data. no need to go back to server for data
                },
                fieldName: 'files',
                timeout: 0
            });
            var isDone = false;
            uppyDashboard.on('progress', (progress) => {
                console.log(progress);
                if (progress == 0) {

                }
                else if (progress < 100) {
                    uppyDashboard.info('Uploading...', 'success', 2000);
                }
                else if (progress == 100) {
                    if (!isDone) {
                        uppyDashboard.info('Almost there...', 'success', 60000);
                        isDone = true;
                    }
                    else {
                        uppyDashboard.info('Done!', 'success', 2000);
                    }
                }
                else {}
            })
            uppyDashboard.on('upload-success', (file, response) => {

                $('[data-wizard-type="action-next"]').prop("disabled", false);

                //TODO: create image for thumbmail for when files have already been uploaded
                //var img = new Image()
                //img.width = 300
                //img.alt = file.id
                //img.src = response.uploadURL
                //document.body.appendChild(img)
                //$(id + ' .uppy-StatusBar-actionBtn--done').append('hide');
            })

            @if (Model.Course.ImageResource != null)
            {
                <text>

            uppyDashboard.addFile({
                name: '@Model.Course.ImageResource.Name', // file name
                type: '@Model.Course.ImageResource.FileType', // file type
                data: { size: @Model.Course.ImageResource.Size  }, // file blob
                preview: '@Model.Course.ImageUrl'
            })

            var uploadedfile;
            uppyDashboard.getFiles().forEach(file => {
                uppyDashboard.setFileState(file.id, {
                    progress: {
                        uploadComplete: true,
                        uploadStarted: true,
                        percentage: 100,
                        bytesUploaded: @Model.Course.ImageResource.Size
                    }
                });
                uploadedfile = file;
            })

            uploadedfile.uploadURL = '@Model.Course.ImageUrl';

            uppyDashboard.emit('upload-success', uploadedfile, uploadedfile);

                </text>
            }
        }

        return {
            init: function () {
                initUppy1();
            }
        };
    }();

    var FLWizard = function () {
        // Base elements
        var _wizardEl;
        var _formEl;
        var _wizardObj;

        // Private functions
        var _initWizard = function () {
            // Initialize form wizard
            var startStep = 1;
            var hash = parseInt(location.hash.substr(1));
            if (hash && Number.isInteger(hash))
                startStep = hash;

            _wizardObj = new KTWizard(_wizardEl, {
                startStep: startStep, // initial active step number
                clickableSteps: @(Model.Course.Status == CourseStatus.Active ? "true" : "false")  // allow step clicking
            });

            var _btnNext = KTUtil.find(_wizardEl, '[data-wizard-type="action-next"]');
            //var _btnPrev = KTUtil.find(_wizardEl, '[data-wizard-type="action-prev"]');
            var _btnSubmit = KTUtil.find(_wizardEl, '[data-wizard-type="action-submit"]');

            // Change event
            _wizardObj.on('change', function (wizard) {
                if (wizard.getStep() > wizard.getNewStep()) {
                    window.location.href = window.location.href.split("#")[0] + "#" + (wizard.getStep() - 1);
                    return; // Skip if stepped back
                }

                KTUtil.btnWait(_btnNext, "spinner spinner-right spinner-white pr-15 disabled", "Please wait");

                if (wizard.getStep() == 1) {
                    window.location.href = window.location.href.split("#")[0] + "#" + wizard.getNewStep();
                    location.reload();

                    return false;
                }

                if (wizard.getStep() == 2) {
                    $(_formEl).validate({
                        rules: {
                            Name: {
                                required: true
                            },
                            Objectives: {
                                required: true,
                                rangelength: [2, 280]
                            },
                            Tags: {
                                required: true
                            },
                            Duration: {
                                required: true,
                                number: true
                            }
                        }
                    });
                    if ($(_formEl).valid()) {

                        var data = $(_formEl).serialize();
                        $.ajax({
                            url: "/api/courses/step2",
                            type: "POST",
                            data: data,
                            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                            success: function (res) {
                                window.location.href = window.location.href.split("#")[0] + "#" + wizard.getNewStep();
                                location.reload();
                            }
                        });

                        return false;
                    }
                }

                if (wizard.getStep() == 3) {

                    var rules = {

                    };

                    $(_formEl).validate({
                        rules: rules,
                    });

                    if ($(_formEl).valid()) {
                        $("#Content").val(tinymce.activeEditor.getContent());
                        var data = $(_formEl).serialize();
                        $.ajax({
                            url: "/api/courses/step3",
                            type: "POST",
                            data: data,
                            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                            success: function (res) {
                                window.location.href = window.location.href.split("#")[0] + "#" + wizard.getNewStep();
                                location.reload();
                            },
                            error: function (res) {
                                KTUtil.btnRelease(_btnNext);
                                alert(res.responseText);
                            }
                        });

                        return false;
                    }
                }

                KTUtil.scrollTop();
                KTUtil.btnRelease(_btnNext);
                return false;  // Do not change wizard step, further action will be handled by he validator
            });

            // Changed event
            _wizardObj.on('changed', function (wizard) {
                KTUtil.scrollTop();
                $('[data-wizard-type="action-next"]').prop("disabled", false);

                KTUtil.btnRelease(_btnNext);
            });

            // Submit event
            _wizardObj.on('submit', function (wizard) {

                KTUtil.btnWait(_btnSubmit, "spinner spinner-right spinner-white pr-15 disabled", "Please wait");

                fetch("/api/courses/final", {
                    method: "POST",
                    body: new FormData(_formEl)
                })
                    .then(function (response) {
                        return response.json();
                    })
                    .then(function (session) {
                        window.location.href = window.location.href.substr(0, window.location.href.indexOf("setup"));
                        location.reload();
                    })
                    .then(function (result) {
                        // If redirectToCheckout fails due to a browser or network
                        // error, you should display the localized error message to your
                        // customer using error.message.
                        if (result.error) {

                            KTUtil.btnRelease(_btnSubmit);

                            alert(result.error.message);
                        }
                    })
                    .catch(function (error) {

                        KTUtil.btnRelease(_btnSubmit);

                        console.error("Error:", error);
                    });
            });
        }

        var _initValidation = function () {

        }

        return {
            // public functions
            init: function () {
                _wizardEl = KTUtil.getById('kt_wizard_v3');
                _formEl = KTUtil.getById('kt_form');

                _initWizard();
            }
        };
        }();

    var KTTinymce = function () {
        // Private functions

        return {
            // public functions
            init: function () {

                tinymce.init({
                    selector: '#Content',
                    menubar: false,
                    statusbar: false,
                    toolbar: [ 'undo redo restoredraft | cut copy paste | bold italic | link image media | bullist numlist | advlist | autolink | lists' ],
                    plugins: 'advlist autolink link image media lists autoresize autosave',
                    autosave_ask_before_unload: false
                    //setup: function (editor) {
                    //    editor.on('change', function () {
                    //        tinymce.triggerSave();
                    //    });
                    //}
                });
            }
        };
    }();

    jQuery(document).ready(function () {
        FLWizard.init();
        FLUppy.init();
        KTTinymce.init();

        var input = document.getElementById("Tags");
        tagify = new Tagify(input, {
            whitelist: ["Leadership (LD)", "Pedagogy (PG)", "Teacher Assessment (TA)", "Self-learning", "Video", "Live" ],
            maxTags: 10,
            dropdown: {
                maxItems: 20,           // <- mixumum allowed rendered suggestions
                classname: "tags-look", // <- custom classname for this dropdown, so it could be targeted
                enabled: 0,             // <- show suggestions on focus
                closeOnSelect: false    // <- do not hide the suggestions dropdown once an item has been selected
            },
                originalInputValueFormat: valuesArr => valuesArr.map(item => item.value).join(',')
        })

        autosize(document.getElementById("Objectives"));
        autosize(document.getElementById("Description"));

        $('#StartTime').datetimepicker({
            defaultDate: '@DateTime.Now.Date.AddHours(10).AddDays(7).ToString("MM/dd/yyyy HH:mm:ss")'
        });
    });

    function addClass() {
        fetch(window.location.pathname + '?handler=NewClassPartial&startTime=' + encodeURIComponent($('#StartTime > input').val()))
            .then((response) => {
                return response.text();
            })
            .then((result) => {
                $('#classes').append(result);
                //$('#StartTime > input').val('');
            });
    };

    function deleteClass(id) {
        fetch(window.location.pathname + '?handler=DeleteClassPartial&classId=' + id)
            .then((response) => {
                $('#class-' + id).remove();
            });
    };
    </script>
}

<!--begin::Subheader-->
@await Html.PartialAsync("Layouts/Partials/Subheader/_Subheader")
<!--end::Subheader-->
<!--begin::Entry-->
<div class="d-flex flex-column-fluid">
    <!--begin::Container-->
    <div class="container">

        <div class="card card-custom">
            <div class="card-body p-0">
                <!--begin: Wizard-->
                <div class="wizard wizard-3" id="kt_wizard_v3" data-wizard-state="step-first" data-wizard-clickable="true">
                    <!--begin: Wizard Nav-->
                    <div class="wizard-nav">
                        <div class="wizard-steps px-8 py-8 px-lg-15 py-lg-3">
                            <!--begin::Wizard Step 1 Nav-->
                            <div class="wizard-step" data-wizard-type="step" data-wizard-state="current">
                                <div class="wizard-label">
                                    <h3 class="wizard-title">
                                        <span>1.</span>Upload Image
                                    </h3>
                                    <div class="wizard-bar"></div>
                                </div>
                            </div>
                            <!--end::Wizard Step 1 Nav-->
                            <!--begin::Wizard Step 2 Nav-->
                            <div class="wizard-step" data-wizard-type="step">
                                <div class="wizard-label">
                                    <h3 class="wizard-title">
                                        <span>2.</span>Basic Details
                                    </h3>
                                    <div class="wizard-bar"></div>
                                </div>
                            </div>
                            <!--end::Wizard Step 2 Nav-->
                            <!--begin::Wizard Step 3 Nav-->
                            <div class="wizard-step" data-wizard-type="step">
                                <div class="wizard-label">
                                    <h3 class="wizard-title">
                                        <span>3.</span>Course Content
                                    </h3>
                                    <div class="wizard-bar"></div>
                                </div>
                            </div>
                            <!--end::Wizard Step 3 Nav-->
                            <!--begin::Wizard Step 4 Nav-->
                            <div class="wizard-step" data-wizard-type="step">
                                <div class="wizard-label">
                                    <h3 class="wizard-title">
                                        <span>4.</span>Manage Classes
                                    </h3>
                                    <div class="wizard-bar"></div>
                                </div>
                            </div>
                            <!--end::Wizard Step 4 Nav-->
                        </div>
                    </div>
                    <!--end: Wizard Nav-->
                    <!--begin: Wizard Body-->
                    <div class="row justify-content-center py-10 px-8 py-lg-12 px-lg-10">
                        <div class="col-xl-10 col-xxl-10">
                            <!--begin: Wizard Form-->
                            <form class="form" id="kt_form">
                                <!--begin: Wizard Step 1-->
                                <div class="pb-5 flex-center" data-wizard-type="step-content" data-wizard-state="current">
                                    @await Html.PartialAsync("Partials/_Step1")
                                </div>
                                <!--end: Wizard Step 1-->
                                <!--begin: Wizard Step 2-->
                                <div class="pb-5" data-wizard-type="step-content">
                                    @await Html.PartialAsync("Partials/_Step2", Model.Course)
                                </div>
                                <!--end: Wizard Step 2-->
                                <!--begin: Wizard Step 3-->
                                <div class="pb-5" data-wizard-type="step-content">
                                    @await Html.PartialAsync("Partials/_Step3", Model.Course)
                                </div>
                                <!--end: Wizard Step 3-->
                                <!--begin: Wizard Step 4-->
                                <div class="pb-5" data-wizard-type="step-content">
                                    @await Html.PartialAsync("Partials/_Step4", Model.Course)
                                </div>
                                <!--end: Wizard Step 4-->
                                <!--begin: Wizard Actions-->
                                <div class="d-flex justify-content-between border-top mt-5 pt-10">
                                    <div class="mr-2">
                                        <button type="button" class="btn btn-light-primary font-weight-bolder text-uppercase px-9 py-4" data-wizard-type="action-prev">Previous</button>
                                    </div>
                                    <div>
                                        <button type="button" class="btn btn-success font-weight-bolder text-uppercase px-9 py-4" data-wizard-type="action-submit" @(Model.Course.Status == CourseStatus.Review ? "" : "disabled")>Make Active</button>
                                        <button type="button" class="btn btn-primary font-weight-bolder text-uppercase px-9 py-4" data-wizard-type="action-next" disabled>Save &amp; Continue</button>
                                    </div>
                                </div>
                                <!--end: Wizard Actions-->
                            </form>
                            <!--end: Wizard Form-->
                        </div>
                    </div>
                    <!--end: Wizard Body-->
                </div>
                <!--end: Wizard-->
            </div>
        </div>
    </div>
    <!--end::Container-->
</div>
<!--end::Entry-->